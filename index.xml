<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jesse Szwedko</title>
    <link>http://jesseszwedko.com/</link>
    <description>Recent content on Jesse Szwedko</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 15 Aug 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://jesseszwedko.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>circleci-cli</title>
      <link>http://jesseszwedko.com/project/circleci-cli/</link>
      <pubDate>Sat, 15 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://jesseszwedko.com/project/circleci-cli/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/jszwedko/circleci-cli&#34;&gt;&lt;code&gt;circleci-cli&lt;/code&gt;&lt;/a&gt; is a CLI too that
allows you to interact with CircleCI without leaving the comfort of your
terminal.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://circleci.com&#34;&gt;CircleCI&lt;/a&gt; is a continuous integration service that you
can use with your GitHub projects to automatically build and test your code.
To help you automate tasks, they expose an &lt;a href=&#34;https://circleci.com/docs/api&#34;&gt;HTTP + JSON
API&lt;/a&gt; that you can interact with. &lt;code&gt;circleci-cli&lt;/code&gt;
wraps this API in a nice interface so that you can view, retry, cancel builds
and more!&lt;/p&gt;

&lt;h2 id=&#34;installing:7b174a3f5b6d3932a736691e39ba73d7&#34;&gt;Installing&lt;/h2&gt;

&lt;p&gt;Download the binaries from &lt;a href=&#34;https://github.com/jszwedko/circleci-cli/releases&#34;&gt;https://github.com/jszwedko/circleci-cli/releases&lt;/a&gt; and
place them in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Generate an API token via the &lt;a href=&#34;https://circleci.com/account/api&#34;&gt;settings page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;examples:7b174a3f5b6d3932a736691e39ba73d7&#34;&gt;Examples&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ export CIRCLE_TOKEN=XXXXX # token generated above
$ circleci projects -v
jszwedko/go-circleci
master*  success

jszwedko/circleci-cli
master*  failed

$ circleci recent-builds -a
jszwedko/circleci-cli/2    failed     master    Fix wording in README
jszwedko/go-circleci/3     success    master    Fix link
jszwedko/go-circleci/2     success    master    Add build badge
jszwedko/circleci-cli/1    failed     master    Add link to releases page
jszwedko/go-circleci/1     success    master    Update README for new location

$ circleci show -p jszwedko/go-circle-ci -n 2 # try running with -v
Subject           Add build badge
Trigger           github
Author            Jesse Szwedko
Committer         Jesse Szwedko
Status            success
Build Parameters
                  None
Started           2015-08-14 21:33:44.678 +0000 UTC
Duration          28.604s

Build 0
* Starting the build (success) (770ms)

* Start container (success) (5.289s)

* Enable SSH (success) (1.468s)

* Restore source cache (success) (1.448s)

* Checkout using deploy key: 37:27:f7:68:85:43:46:d2:e1:30:83:8f:f7:1b:ad:c2 (success) (2.378s)

* Configure the build (success) (80ms)

* Restore cache (success) (3.783s)

* rm -rf $HOME/.go_workspace (success) (726ms)

* Save cache (success) (674ms)

* go vet ./... (success) (1.033s)

* go test ./... (success) (1.428s)

* Collect test metadata (experimental). (success) (1.568s)

* Collect artifacts (success) (6.515s)

* Disable SSH (success) (8ms)

$ circleci -h
NAME:
   circleci - Tool for interacting with the CircleCI API

USAGE:
   circleci [global options] command [command options] [arguments...]

VERSION:
   0.0.1-2-gcad9be7 (cad9be7f983569548d473ef5335a3a25fe2e425b)

COMMANDS:
   projects                     Print projects
   recent-builds, recent        Recent builds for the current project
   show                         Show details for build
   list-artifacts, artifacts    Show artifacts for build (default to latest)
   test-metadata                Show test metadata for build
   retry-build, retry           Retry a build
   cancel-build, cancel         Cancel a build
   build                        Trigger a new build
   clear-cache                  Clear the build cache
   add-env-var                  Add an environment variable to the project (expects the name and value as arguments)
   delete-env-var               Add an environment variable to the project (expects the name as argument)
   add-ssh-key                  Add an SSH key to be used to access external systems (expects the hostname and private key as arguments)
   help, h                      Shows a list of commands or help for one command

GLOBAL OPTIONS:
   --host, -H &amp;quot;https://circleci.com&amp;quot;    CircleCI URI [$CIRCLE_HOST]
   --token, -t                          API token to use to access CircleCI (not needed for displaying information about public repositories) [$CIRCLE_TOKEN]
   --help, -h                           show help
   --version, -v                        print the version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The exact commands and output may very with updates, so please see the
&lt;a href=&#34;https://github.com/jszwedko/circleci-cli&#34;&gt;README&lt;/a&gt; for the most up-to-date
documentation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>go-circleci</title>
      <link>http://jesseszwedko.com/project/go-circleci/</link>
      <pubDate>Sat, 15 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>http://jesseszwedko.com/project/go-circleci/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/jszwedko/go-circleci&#34;&gt;&lt;code&gt;go-circleci&lt;/code&gt;&lt;/a&gt; is a Go library that
I wrote to wrap &lt;a href=&#34;https://circleci.com/docs/api&#34;&gt;CircleCI&amp;rsquo;s API&lt;/a&gt;. It can be used
by other Go projects that wish to interact with the API.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://circleci.com&#34;&gt;CircleCI&lt;/a&gt; is a continuous integration service that you
can use with your GitHub projects to automatically build and test your code.&lt;/p&gt;

&lt;p&gt;The library API itself mirrors closely the endpoints exposed by CircleCI, you
can see the &lt;a href=&#34;http://godoc.org/github.com/jszwedko/go-circleci&#34;&gt;GoDoc&lt;/a&gt; page for
the latest documentation.&lt;/p&gt;

&lt;h2 id=&#34;installing:2f1696f756a2b805fe5dfe31b1f71df4&#34;&gt;Installing&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Set up your &lt;a href=&#34;https://golang.org/doc/code.html&#34;&gt;Go build environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go get github.com/jszwedko/go-circleci&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In your project, import the library via &lt;code&gt;import &amp;quot;github.com/jszwedko/go-circleci&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Ansible to provision AWS autoscaling instances</title>
      <link>http://jesseszwedko.com/post/ansible-aws-launch-configuration/</link>
      <pubDate>Sat, 11 Jul 2015 19:15:44 -0700</pubDate>
      
      <guid>http://jesseszwedko.com/post/ansible-aws-launch-configuration/</guid>
      <description>

&lt;h2 id=&#34;problem-statement:e8ac8ab4751f14b2c4a36b81bcb2af64&#34;&gt;Problem statement:&lt;/h2&gt;

&lt;p&gt;If you are running your infrastructure on EC2 in AWS, you are probably using
&lt;a href=&#34;http://aws.amazon.com/autoscaling/&#34;&gt;AWS&amp;rsquo;s autoscaling service&lt;/a&gt; to manage your
instances. If you are not, you should be. Even if you don&amp;rsquo;t plan to have your
instances scale up and down based on traffic patterns, you&amp;rsquo;ll want to use
autoscaling for the simple case of keeping a certain number of instances
running if one of them stops responding or is decommissioned by AWS &amp;ndash; without
requiring manual intervention by an engineer to spin up and configure a new
server.&lt;/p&gt;

&lt;p&gt;The tricky bit is making sure that the new instances that are created are
configured properly for their purpose. For Cassandra, for example, this might
mean pointing the configuration at the seed nodes for your cluster. For a web
server this may mean configuring which database to point to and credentials for
connecting. Either way it is rare that your server will need no configuration
at launch time to operate properly (even though you should attempt to embed as
much configuration as possible into your AMIs). AWS&amp;rsquo;s solution for this is
user-data, a script (or cloud-init file) that is executed on first boot.&lt;/p&gt;

&lt;p&gt;The simplest thing you can do is provide a bash script, e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

aws ec2 describe-instances \
  --filters &amp;quot;Name=tag:Database,Values=true&amp;quot; \
  --query &#39;Reservations[*].Instances[*].PrivateDnsName&#39; \
  --output text \
  &amp;gt; /etc/databases

systemctl start my-webservice
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a contrived example, but I hope it is illustrative.&lt;/p&gt;

&lt;p&gt;At Braintree, as our user-data became more complex (things like configuring
firewall rules, setting up certificates and configuring services like
exhibitor), we made the decision to migrate from bash scripts to
&lt;a href=&#34;http://www.ansible.com/home&#34;&gt;Ansible&lt;/a&gt; configuration to better organize it and
take advantage of &lt;a href=&#34;http://jinja.pocoo.org/docs/dev/&#34;&gt;jinja2&lt;/a&gt; templating.&lt;/p&gt;

&lt;p&gt;If you are familiar with Ansible, you can probably guess that the difficulty
with using Ansible as user-data is that Ansible configuration typically
consists of a playbook and all of its supporting assets (templates, static
files, roles, etc.) which doesn&amp;rsquo;t neatly fit into a single file (AWS also
limits user-data to 16 KB) so it may seem like your only option is to store the
configuration elsewhere (like S3) and retrieve it in your user-data or bake it
into your image (slow turn around time for changes), but below I&amp;rsquo;ll describe
another option that ended up working for us.&lt;/p&gt;

&lt;h2 id=&#34;solution:e8ac8ab4751f14b2c4a36b81bcb2af64&#34;&gt;Solution:&lt;/h2&gt;

&lt;p&gt;Compress and base64 encode your Ansible configuration! It may seem like
a simple idea, but it didn&amp;rsquo;t immediately occur to us so I thought I would share
it here. I also think this technique could be used for other standalone
configuration management tools like
&lt;a href=&#34;https://docs.chef.io/chef_solo.html&#34;&gt;&lt;code&gt;chef-solo&lt;/code&gt;&lt;/a&gt; or even just modularized
bash scripts.&lt;/p&gt;

&lt;p&gt;We use Terraform to manage our infrastructure, so we have this compression and
base64 encoding happen as a preprocessing step when planning (using a wrapper
script around &lt;code&gt;terraform plan&lt;/code&gt;) that is used by our launch configuration
resources, but you could fit it into your workflow however works best.&lt;/p&gt;

&lt;p&gt;Example script you can use to automate creation of the user-data script:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#! /bin/sh

ansible_configuration=$1
shift

cat &amp;lt;&amp;lt;-EOF
#! /bin/bash

set -o errexit

mkdir -p /tmp/ansible
echo &#39;$(tar c -C &amp;quot;$ansible_configuration&amp;quot; . | gzip -n | base64 -w 0)&#39; | base64 -d | tar xz -C /tmp/ansible
cd /tmp/ansible
EOF

echo -n &#39;/usr/local/bin/ansible-playbook playbook.yml --connection=local -i localhost, -e target=localhost&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that this script assumes that you have a variable called &lt;code&gt;target&lt;/code&gt; that you
use for your &lt;code&gt;hosts&lt;/code&gt; declaration in your playbook.&lt;/p&gt;

&lt;p&gt;Example of generated user-data (base64 encoded directory shortened for brevity):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#! /bin/bash

set -o errexit

mkdir -p /tmp/ansible
echo &#39;H4sIAAAAAAAAA+w9aXPbRpb+[...]+CV+qgxijv8ggqkPOrhZngzP99N/Tv0z+6bZbGw3u9QXa2v1ovOfw0nfP/yPxjlBAKBQCAQCAQCgUAgEAgEAoHg+eEnXr53cwCgAAA=&#39; | base64 -d | tar xz -C /tmp/ansible
cd /tmp/ansible
/usr/local/bin/ansible-playbook playbook.yml --connection=local -i localhost, -e target=localhost
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is what you would use for the user-data in your launch configuration
whereby, on launch, the encoded Ansible configuration is decoded, written
out to &lt;code&gt;/tmp/ansible&lt;/code&gt;, and &lt;code&gt;ansible-playbook&lt;/code&gt; executed.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>git-duet release</title>
      <link>http://jesseszwedko.com/post/git-duet-release/</link>
      <pubDate>Sat, 30 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://jesseszwedko.com/post/git-duet-release/</guid>
      <description>&lt;p&gt;Today marks the release of the Go port of &lt;code&gt;git-duet&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git-duet&lt;/code&gt; allows paired programmers to not lose their identities when
collaborating on &lt;code&gt;git&lt;/code&gt; commits.&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&#34;http://jesseszwedko.com/project/git-duet/&#34;&gt;project page&lt;/a&gt; for
more details.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>git-duet</title>
      <link>http://jesseszwedko.com/project/git-duet/</link>
      <pubDate>Sat, 30 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://jesseszwedko.com/project/git-duet/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/git-duet/git-duet&#34;&gt;&lt;code&gt;git-duet&lt;/code&gt;&lt;/a&gt; makes use of the committer
field of &lt;code&gt;git&lt;/code&gt; commits to allow paired pairing while maintaining identity.&lt;/p&gt;

&lt;p&gt;Traditionally, pairing programmers have to settle for either:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Only associating one of their names and email addresses with the commit&lt;/li&gt;
&lt;li&gt;Abusing &lt;code&gt;user.name&lt;/code&gt; and &lt;code&gt;user.email&lt;/code&gt; to create an amalgamation of their
names and e-mails (this is what many other tools do, such as
&lt;a href=&#34;https://github.com/pivotal/git_scripts&#34;&gt;git-pair&lt;/a&gt;). Resulting in commits
that are attributed to a fictitious identity such as &lt;code&gt;Josh Susser &amp;amp; Sam
Pierson &amp;lt;pair+jsusser+sam@pivotallabs.com&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;git-duet&lt;/code&gt; takes a different approach and sets the author and the committer on
a commit allowing two individuals to associate their real names and e-mails
with a commit resulting in commits like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git show --pretty=fuller
commit 54486ba89913e209f00903bdef34fc38e61edeb0
Author:     Jane Doe &amp;lt;jane.doe@example.com&amp;gt;
AuthorDate: Sat Jun 20 17:55:19 2015 -0700
Commit:     John Doe &amp;lt;john.doe@example.com&amp;gt;
CommitDate: Sat Jun 20 17:55:19 2015 -0700

Paired commit

Signed-off-by: John Doe &amp;lt;john.doe@example.com&amp;gt;

diff --git a/foo b/foo
new file mode 100644
index 0000000..e69de29
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a port of &lt;a href=&#34;https://github.com/meatballhat/git-duet&#34;&gt;https://github.com/meatballhat/git-duet&lt;/a&gt; to Golang because
this was found to be more performant and have less issues during usage due to
Ruby version managers like &lt;code&gt;rbenv&lt;/code&gt; and &lt;code&gt;rvm&lt;/code&gt; that frequently complain that
&lt;code&gt;git-duet&lt;/code&gt; is not installed in a given version of Ruby when not using the
system Ruby. Many kudos to &lt;a href=&#34;https://github.com/meatballhat&#34;&gt;@meatballhat&lt;/a&gt; for
the initial implementation.&lt;/p&gt;

&lt;h2 id=&#34;installing:770c9063314e569fa99eca289bf3a2b8&#34;&gt;Installing&lt;/h2&gt;

&lt;p&gt;Download the binaries from &lt;a href=&#34;https://github.com/git-duet/git-duet/releases&#34;&gt;https://github.com/git-duet/git-duet/releases&lt;/a&gt; and
place them in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;usage:770c9063314e569fa99eca289bf3a2b8&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;Create a &lt;code&gt;~/.git-authors&lt;/code&gt; with your authors:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;authors:
  jd: Jane Doe; jane
  fb: Frances Bar
  email:
    domain: awesometown.local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use &lt;code&gt;git duet &amp;lt;author initals&amp;gt; &amp;lt;committer initials&amp;gt;&lt;/code&gt; to set the author and
committer.&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;git duet-commit&lt;/code&gt; to commit using the set author and committer (I recommend
aliasing this, e.g. &lt;code&gt;git dci&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;git solo jd&lt;/code&gt; to erase the committer and just set the author (for when you
aren&amp;rsquo;t pairing).&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir your-repo
$ cd your-repo
$ git init
$ touch README.md
$ git add -A
$ git duet jd fb
$ git duet-commit -m &#39;Initial commit&#39;
$ git show --pretty=fuller
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See &lt;a href=&#34;https://github.com/git-duet/git-duet/&#34;&gt;README.md&lt;/a&gt; for more configuration
options.&lt;/p&gt;

&lt;p&gt;Admittedly this is still a hack to fit the concept of pairing on code into the
constraints of the metadata &lt;code&gt;git&lt;/code&gt; allows to be associated with a commit, but
I find that this hack is better than combining names and emails into the author
of the commit for the following reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Can easily search for commits that a given user has touched&lt;/li&gt;
&lt;li&gt;Tools like GitHub are able to hyperlink commits to users and notify the
appropriate user when a commit has been commented upon.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Eventually &lt;code&gt;git&lt;/code&gt; may support the notion of multiple authors (see:
&lt;a href=&#34;https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=451880)&#34;&gt;https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=451880)&lt;/a&gt; at which point
&lt;code&gt;git-duet&lt;/code&gt; will change to utilize this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Debugging Go</title>
      <link>http://jesseszwedko.com/talk/go-debugging/</link>
      <pubDate>Thu, 31 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://jesseszwedko.com/talk/go-debugging/</guid>
      <description>&lt;p&gt;Talk I gave at the Go Steel Programmers meet-up group in Pittsburgh about
the current state of Go debugging (both traditional debuggers as well as
print/log based debugging).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Golang ORMs: A survey of the current state of Golang ORMs</title>
      <link>http://jesseszwedko.com/talk/go-orms/</link>
      <pubDate>Thu, 30 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://jesseszwedko.com/talk/go-orms/</guid>
      <description>&lt;p&gt;Talk I gave at the Go Steel Programmers meet-up group in Pittsburgh about
the current state of Go ORMs.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=8411754&#34;&gt;Hacker News Discussion&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Path to Go 1.1</title>
      <link>http://jesseszwedko.com/talk/path-to-go-1-1/</link>
      <pubDate>Thu, 28 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://jesseszwedko.com/talk/path-to-go-1-1/</guid>
      <description>&lt;p&gt;Talk given at the Go Steel Programmers meet-up group in Pittsburgh about
changes in the version 1.1 release of Go with &lt;a href=&#34;https://about.me/sheenathejunglegirl&#34;&gt;Sheena
Smith&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Continous Delivery: Reliable software development through automation</title>
      <link>http://jesseszwedko.com/talk/continous-delivery-pitt/</link>
      <pubDate>Wed, 04 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>http://jesseszwedko.com/talk/continous-delivery-pitt/</guid>
      <description>

&lt;p&gt;Talk I gave to undergraduate students at the University of Pittsburgh
as part of Computer Science Department&amp;rsquo;s Tech Talk series where industry
members give talks about topics not typically covered in undergraduate computer
science course work. The talk covers the basics of source control, test
automation, and deployment automation using git, Travis CI, and capistrano.&lt;/p&gt;

&lt;h3 id=&#34;abstract:9d33b3fc261765f5f564b217498f444d&#34;&gt;Abstract&lt;/h3&gt;

&lt;p&gt;In much of today&amp;rsquo;s technology industry there is a focus on getting ideas from
paper to implementation and in front of users as quickly as possible. This
allows for rapid iteration of the software with real feedback from users to
drive the direction of the project, which features are needed, which can be
improved, and which can be removed. Continuous delivery is a software design
practice that attempts to shorten this cycle time in a way that minimizes risk
through build repeatability, test automation, and deployment automation.&lt;/p&gt;

&lt;p&gt;In this talk, I hope to demonstrate the effectiveness of the principles of
continuous delivery by taking us through the evolution of a software design
process using a simple web application to drive the examples. We will start
with a process which uses none of the concepts of continuous delivery and
slowly adds them (using specific tools as examples) so that we can see the
philosophy of each step along the way. Some of the tools that will be discussed
include git, Travis CI, and Capistrano. Attendees will walk away with the tools
and experience necessary to begin implementing the discussed principles in
their own projects at a small scale.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Optimizing the Energy Consumption of Continuous Query Processing with Mobile Clients</title>
      <link>http://jesseszwedko.com/publication/optimizing-energy/</link>
      <pubDate>Wed, 01 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>http://jesseszwedko.com/publication/optimizing-energy/</guid>
      <description>&lt;p&gt;Complex event detection over data streams has become ubiquitous through the
widespread use of sensors, wireless connectivity and the wide variety of
end-user mobile devices. Typically, such event detection is carried out by
a data stream management system executing continuous queries (CQs), registered
by the users. In this paper, we consider the situation where the results of the
CQs, which are in the form of individual data streams, are disseminated to the
users&amp;rsquo; hand-held, battery-operated devices over a shared broadcast medium. In
order to reduce the overall energy consumption of the mobile devices, we
propose Bose*, a power-aware query operator placement algorithm that determines
which part of a CQ plan should be executed at the data stream management system
and which part should be executed at the mobile device. Bose*&amp;rsquo;s effectiveness
in reducing energy consumption, as well as response time under specific
conditions, is evaluated using simulation, driven by parameters measured on
real mobile devices.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Visualization of Energy Consumption of Continuous Query Processing with Mobile Clients</title>
      <link>http://jesseszwedko.com/publication/visualizing-energy/</link>
      <pubDate>Wed, 01 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>http://jesseszwedko.com/publication/visualizing-energy/</guid>
      <description>&lt;p&gt;Complex event detection over data streams has become ubiquitous through the
widespread use of sensors, wireless connectivity and the wide variety of
end-user mobile devices. Typically, event detection is carried out by a central
server executing continuous queries. In this demonstration, we focus on the
case where users with mobile devices submit continuous queries (for event
detection) to a data stream management server which disseminates the results to
the users over a shared broadcast medium. In order to minimize the overall
energy consumption of the mobile devices (clients), we have proposed operator
placement algorithms that split the processing of each continuous query between
the centralized server and the requesting mobile clients, thus trading off
energy consumption for communication energy consumption for computation.
Specifically, in this demonstration, we present an interactive graphical
interface to the inner workings of our three proposed operator placement
algorithms, whereby attendees are able to investigate various query plans and
the decisions that the algorithms make, as well as visualize the results of
these algorithms in terms of client power consumption and response time.
Besides being able to step through an algorithm&amp;rsquo;s execution as it considers
various operator placement decisions, attendees are able to experiment with
different scenarios by customizing the parameters of the query workloads (e.g.,
changing the selectivities and projectivities of the operators) or the client&amp;rsquo;s
profile (e.g., power consumed per unit of time of processing) and examine the
impact.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Demonstrating an Evacuation Algorithm with Mobile Devices using an E-Scavenger Hunt Game</title>
      <link>http://jesseszwedko.com/publication/demonstrating-evacuation/</link>
      <pubDate>Mon, 01 Jun 2009 00:00:00 +0000</pubDate>
      
      <guid>http://jesseszwedko.com/publication/demonstrating-evacuation/</guid>
      <description>&lt;p&gt;Casualties in emergency situations are often caused by panic and in cases where
building evacuation is required, they are often caused by a disorganized
evacuation. This has motivated us to design a two-layer indoor evacuation
system that takes advantage of two technologies all people carry on them,
namely, cellular phones with cameras and RFID cards. The proposed system
integrates QR-Code and RFID-based positioning with a routing system with
mounted terminals and displays for guiding people with RFID tags out of
a building. People with mobile devices with cameras use an application that
resolves QR-Codes into web addresses that point to dynamically generated
evacuation instructions. As a proof-of-concept, we have implemented this system
with commercially available tools and components as an e-scavenger hunt game
which uses SCAVY, our novel evacuation (routing) algorithm, to guide players
around a building visiting different locations in a load balancing manner. In
this demo, we are planning to deploy this e-scavenger game and the participants
would be able to follow the progress of the game (evacuation) through a system
monitor dashboard.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>